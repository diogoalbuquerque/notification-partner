// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_usecase is a generated GoMock package.
package usecase_test

import (
	context "context"
	http "net/http"
	reflect "reflect"

	entity "github.com/diogoalbuquerque/sub-notifier/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceNotify is a mock of ServiceNotify interface.
type MockServiceNotify struct {
	ctrl     *gomock.Controller
	recorder *MockServiceNotifyMockRecorder
}

// MockServiceNotifyMockRecorder is the mock recorder for MockServiceNotify.
type MockServiceNotifyMockRecorder struct {
	mock *MockServiceNotify
}

// NewMockServiceNotify creates a new mock instance.
func NewMockServiceNotify(ctrl *gomock.Controller) *MockServiceNotify {
	mock := &MockServiceNotify{ctrl: ctrl}
	mock.recorder = &MockServiceNotifyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceNotify) EXPECT() *MockServiceNotifyMockRecorder {
	return m.recorder
}

// NotifyPartner mocks base method.
func (m *MockServiceNotify) NotifyPartner(ctx context.Context, url, header string, request interface{}) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyPartner", ctx, url, header, request)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyPartner indicates an expected call of NotifyPartner.
func (mr *MockServiceNotifyMockRecorder) NotifyPartner(ctx, url, header, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyPartner", reflect.TypeOf((*MockServiceNotify)(nil).NotifyPartner), ctx, url, header, request)
}

// MockServiceOrder is a mock of ServiceOrder interface.
type MockServiceOrder struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOrderMockRecorder
}

// MockServiceOrderMockRecorder is the mock recorder for MockServiceOrder.
type MockServiceOrderMockRecorder struct {
	mock *MockServiceOrder
}

// NewMockServiceOrder creates a new mock instance.
func NewMockServiceOrder(ctrl *gomock.Controller) *MockServiceOrder {
	mock := &MockServiceOrder{ctrl: ctrl}
	mock.recorder = &MockServiceOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOrder) EXPECT() *MockServiceOrderMockRecorder {
	return m.recorder
}

// FindOnlineOrderNumber mocks base method.
func (m *MockServiceOrder) FindOnlineOrderNumber(ctx context.Context, seqOnlineOrderRf string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOnlineOrderNumber", ctx, seqOnlineOrderRf)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOnlineOrderNumber indicates an expected call of FindOnlineOrderNumber.
func (mr *MockServiceOrderMockRecorder) FindOnlineOrderNumber(ctx, seqOnlineOrderRf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOnlineOrderNumber", reflect.TypeOf((*MockServiceOrder)(nil).FindOnlineOrderNumber), ctx, seqOnlineOrderRf)
}

// GetRequestedOrder mocks base method.
func (m *MockServiceOrder) GetRequestedOrder(ctx context.Context, seqOnlineOrder string) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestedOrder", ctx, seqOnlineOrder)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestedOrder indicates an expected call of GetRequestedOrder.
func (mr *MockServiceOrderMockRecorder) GetRequestedOrder(ctx, seqOnlineOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestedOrder", reflect.TypeOf((*MockServiceOrder)(nil).GetRequestedOrder), ctx, seqOnlineOrder)
}
